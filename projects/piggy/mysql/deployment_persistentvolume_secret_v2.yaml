apiVersion: v1
kind: PersistentVolume            # Create a PersistentVolume
metadata:
  name: mysql-pv
  namespace: piggy
  labels:
    type: local
spec:
  storageClassName: standard      # Storage class. A PV Claim requesting the same storageClass can be bound to this volume.
  capacity:
    storage: 250Mi
  accessModes:
    - ReadWriteOnce
  hostPath:                       # hostPath PersistentVolume is used for development and testing. It uses a file/directory on the Node to emulate network-attached storage
    path: "/mnt/data"
  persistentVolumeReclaimPolicy: Retain  # Retain the PersistentVolume even after PersistentVolumeClaim is deleted. The volume is considered “released”. But it is not yet available for another claim because the previous claimant’s data remains on the volume.

---
apiVersion: v1
kind: PersistentVolumeClaim        # Create a PersistentVolumeClaim to request a PersistentVolume storage
metadata:                          # Claim name and labels
  name: mysql-pv-claim
  namespace: piggy
  labels:
    app: piggy-backend
spec:                              # Access mode and resource limits
  storageClassName: standard       # Request a certain storage class
  accessModes:
    - ReadWriteOnce                # ReadWriteOnce means the volume can be mounted as read-write by a single Node
  resources:
    requests:
      storage: 250Mi

---
apiVersion: v1                    # API version
kind: Service                     # Type of kubernetes resource
metadata:
  name: piggy-backend-mysql         # Name of the resource
  namespace: piggy
  labels:                         # Labels that will be applied to the resource
    app: piggy-backend
spec:
  ports:
    - port: 3306
  selector:                       # Selects any Pod with labels `app=piggy-backend,tier=mysql`
    app: piggy-backend
    tier: mysql
  clusterIP: None

---
apiVersion: v1
data:
  password: cGlnZ3kxMjM=
kind: Secret
metadata:
  name: mysql-root-password
  namespace: piggy

---
apiVersion: apps/v1
kind: Deployment                    # Type of the kubernetes resource
metadata:
  name: piggy-backend-mysql           # Name of the deployment
  namespace: piggy
  labels:                           # Labels applied to this deployment
    app: piggy-backend
spec:
  selector:
    matchLabels:                    # This deployment applies to the Pods matching the specified labels
      app: piggy-backend
      tier: mysql
  strategy:
    type: Recreate
  template:                         # Template for the Pods in this deployment
    metadata:
      labels:                       # Labels to be applied to the Pods in this deployment
        app: piggy-backend
        tier: mysql
    spec:                           # The spec for the containers that will be run inside the Pods in this deployment
      containers:
        - image: hypriot/rpi-mysql          # The container image
          name: mysql
          env:                        # Environment variables passed to the container
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:                # Read environment variables from kubernetes secrets
                secretKeyRef:
                  name: mysql-root-password
                  key: password
          ports:
            - containerPort: 3306        # The port that the container exposes
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage  # This name should match the name specified in `volumes.name`
              mountPath: /var/lib/mysql
              subPath: mysql
      volumes:                       # A PersistentVolume is mounted as a volume to the Pod
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
